name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Type of version bump (major, minor, patch, premajor, preminor, prepatch, prerelease)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease

jobs:
  # Job 1: Version Bumping and Android Build
  build_android:
    runs-on: ubuntu-latest
    permissions:
      contents: 'write' # Allows workflow to checkout repository code
      id-token: 'write' # Required for Google Cloud Workload Identity Federation authentication (OIDC token generation)

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for git history
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.0' # Use the specified Node.js version
          cache: 'yarn'

      # Step 4: Install dependencies using Yarn
      - name: Install dependencies
        run: yarn install

      # Step 5: Set up Ruby and Bundler
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'  # Specify a Ruby version
          bundler-cache: true

      # Step 6: Combined version bump
      - name: Bump versions
        working-directory: ${{ github.workspace }}
        run: bundle exec fastlane bump_version version_type:${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_type || 'patch' }}

      # Step 7: Commit version changes (without tagging)
      - name: Commit version changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .version package.json android/app/build.gradle ios/PocketPal.xcodeproj/project.pbxproj
          git commit -m "chore(release): bump version" || echo "No changes to commit"
          git push

      # Step 8: Build Android APK (Debug version without signing)
      - name: Build Android APK
        working-directory: android
        env:
          GRADLE_USER_HOME: ${{ runner.temp }}/.gradle
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          bundle exec fastlane build_android_release

      # Step 9: Create GitHub Release with APK
      - name: Create GitHub Release with APK
        run: |
          # Get current timestamp for unique version
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          VERSION="debug-$TIMESTAMP"
          gh release create "$VERSION" android/app/build/outputs/apk/debug/app-debug.apk --title "Debug Release $VERSION" --generate-notes --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: iOS Build and Upload (runs on macOS)
  build_ios:
    runs-on: macos-15 # macOS 15 with Xcode 16
    needs: build_android

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}    # This ensures we get the latest changes including the version bump
          fetch-depth: 0

      # Step 1: Setup Xcode to use the correct version
      - name: Setup Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_16.4.app

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.0'
          cache: 'yarn'

      # Step 3: Install dependencies using Yarn
      - name: Install dependencies
        run: yarn install

      # Step 4: Set up Ruby and Bundler
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'  # Specify a Ruby version
          bundler-cache: true

      # Step 5: Install CocoaPods dependencies
      - name: Install CocoaPods dependencies
        working-directory: ios
        run: pod install



      # Step 7: Build iOS app
      - name: Build iOS app
        working-directory: ios
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GITHUB_TOKEN: ${{ secrets.MATCH_GITHUB_TOKEN }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          GOOGLE_SERVICES_PLIST: ${{ secrets.GOOGLE_SERVICES_PLIST }}
        run: bundle exec fastlane build_ios_release

      # Step 8: Create GitHub Release with IPA
      - name: Create GitHub Release with IPA
        uses: softprops/action-gh-release@v1
        with:
          files: ios/build/PocketPal.ipa
          tag_name: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
